// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  reports   Report[]
  finds     Find[]
}

// Bike status enumeration
enum BikeStatus {
  LOST
  STOLEN
  FOUND
  FOR_SALE_EXTERNAL
}

// Bike model
model Bike {
  id           String     @id @default(cuid())
  brand        String?
  model        String?
  color        String?
  serialNumber String?    @unique
  description  String?
  images       Image[]
  reports      Report[]
  finds        Find[]
  status       BikeStatus
  locationLat  Float?
  locationLng  Float?
  city         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  source       String?    // esim. "user", "tori.fi"
  sourceUrl    String?
  phash        String?    // perceptual hash deduplikointiin
  archived     Boolean    @default(false)
  archivedAt   DateTime?
}

// Image model
model Image {
  id        String   @id @default(cuid())
  url       String
  bikeId    String
  bike      Bike     @relation(fields: [bikeId], references: [id])
  createdAt DateTime @default(now())
}

// Report model - user reported lost/stolen bike
model Report {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bikeId    String
  bike      Bike     @relation(fields: [bikeId], references: [id])
  lostDate  DateTime?
  place     String?
  contact   String?  // email/phone
  createdAt DateTime @default(now())
}

// Find model - user found ownerless bike
model Find {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bikeId    String
  bike      Bike     @relation(fields: [bikeId], references: [id])
  note      String?
  foundDate DateTime?
  createdAt DateTime @default(now())
}